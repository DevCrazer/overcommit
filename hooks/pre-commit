#!/usr/bin/env ruby
require 'yaml'

CHECKS = %w[braided_paths js_syntax ruby_syntax restricted_paths]
SCRIPTS_PATH = '.git/hooks/scripts/'

def error(str)
  puts "\033[31m#{str}\033[0m"
end

def success(str)
  puts "\033[32m#{str}\033[0m"
end

def warning(str)
  puts "\033[33m#{str}\033[0m"
end

def modified_files(type=nil)
  @modified_files ||= `git diff --cached --name-only`.split
  type ? @modified_files.select{|f| f =~ /\.#{type}$/} : @modified_files
end

def check_braided_paths
  return :good unless File.exists?('.braids')
  braids = YAML.load_file('.braids')
  modified_braids = []
  braids.keys.each do |path|
    if !system("git diff --cached --quiet -- #{path}")
      modified_braids << path
    end
  end
  return :good if modified_braids.empty?
  return :bad, ["Braided plugins can only be updated with Braid",
                *modified_braids]
end

JS_HINT_PATH = File.join(SCRIPTS_PATH, 'jshint.js')
JS_HINT_RUNNER_PATH = File.join(SCRIPTS_PATH, 'jshint_runner.js')
def check_js_syntax
  unless system('which rhino > /dev/null 2> /dev/null')
    return :warn, "Rhino is not installed"
  end

  files = modified_files('js')
  return :good, nil unless files.any?

  output = `rhino -f #{JS_HINT_PATH} #{JS_HINT_RUNNER_PATH} #{files.join(' ')}`
  return (output !~ /^ERROR/ ? :good : :bad), output
end

def check_ruby_syntax
  clean = true
  output = []
  modified_files('rb').each do |file|
    syntax = `ruby -c #{file} 2>&1`
    unless $? == 0
      output += syntax.to_a
      clean = false
    end
  end
  return (clean ? :good : :bad), output
end

exit unless modified_files.any?

RESTRICTED_PATHS = %w[
  vendor
]
def check_restricted_paths
  RESTRICTED_PATHS.each do |path|
    if !system("git diff --cached --quiet -- #{path}")
      return :stop, "changes staged under #{path}"
    end
  end
  return :good
end

puts "Running pre-commit checks"
clean = true
stop = false
CHECKS.each do |check|
  print "  Checking #{check}..."
  status, output = send("check_#{check}")
  case status
  when :good
    success "OK"
  when :bad
    error "FAILED"
    if output
      puts output.map{|line| "    #{line}"}
    end
    clean = false
  when :warn
    warning output if output
  when :stop
    warning output if output
    stop = true
  else
    error "???"
    clean = false
  end
end

puts
if clean && !stop
  success "+++ All pre-commit checks passed"
elsif !clean
  error "!!! One or more pre-commit checks failed"
  exit 1
else
  warning "*** One or more pre-commit hooks stopped the commit"
  warning "*** If you really want to commit this state, use --no-verify"
  exit 1
end
