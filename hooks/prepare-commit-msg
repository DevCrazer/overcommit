#!/bin/sh
#
# prepare-commit-msg
#
# Called with 2 or 3 parameters: FILE SOURCE [SHA1]
#
# FILE    name of file containing the commit log message
# SOURCE  source of the message, which can be:
#         - message (if -m or -F option was given)
#         - template (via -t option or commit.template configuration)
#         - merge (if commit is a merge or .git/MERGE_MSG file exists)
#         - squash (if a .git/SQUASH_MSG file exists)
#         - commit (if a -c, -C or --amend option was given)
# SHA1    only present if SOURCE is "commit"

FILE="$1"
SOURCE=$2
SHA1=$3

if [ -n "$SHA1" ]; then
  OTHER="$SHA1~1"

  # beware of --amend/-c/-C commits which are really merges
  SHA1_AND_PARENTS=$(git rev-list -n 1 --parents $SHA1 | wc -w | tr -d ' ')
  if [ "$SHA1_AND_PARENTS" != "2" ]; then
    SOURCE=merge
  fi
else
  OTHER=HEAD
fi

TMP_FILE=$(mktemp /tmp/$USER.prepare-commit-msg.XXXXXX)

note_author_when_pairing() {
  CURRENT_NAME=$(git config user.name) || return
  CURRENT_EMAIL=$(git config user.email) || return
  SOLO_NAME=$(git config solo.name) || return
  SOLO_EMAIL=$(git config solo.email) || return
  test "$CURRENT_NAME" != "$SOLO_NAME" \
    -o "$CURRENT_EMAIL" != "$SOLO_EMAIL" || return
  AUTHOR="$CURRENT_NAME <$CURRENT_EMAIL>"

  cat "$FILE" | ruby -e '
    $done = false

    def insert
      puts "# Author: #{ARGV.first}\n#\n" unless $done
      $done = true
    end

    begin
      while STDIN.readline
        case $_
        when /^#/
          insert
        end
        puts $_
      end
    rescue EOFError
      # normal exit
    ensure
      insert # just in case no lines matched
    end
  ' "$AUTHOR" > $TMP_FILE && cp $TMP_FILE "$FILE"
}

note_author_when_pairing

# do nothing else if there are no submodule changes staged
git diff-index --cached $OTHER | grep -q -e '^:160000' || exit 0

SUBMODULE_CHANGES=$(git submodule summary --cached $OTHER)

insert_submodule_changes() {
  # we want to insert before any release notes or Change-Ids (etc)
  cat "$FILE" | ruby -e '
    $done = false

    def insert
      puts "#{ARGV.first}\n\n" unless $done
      $done = true
    end

    begin
      while STDIN.readline
        case $_
        when /^#/,
             /^Change-Id: I/,
             /^Reviewed-(on|by): /,
             /^(Acked|Signed-off|Tested)-by: /,
             /^[\s=*-]*release notes?\s*[:.]?[\s=*-]*.*$/i
          insert
        end
        puts $_
      end
    rescue EOFError
      # normal exit
    ensure
      insert # just in case no lines matched
    end
  ' "$SUBMODULE_CHANGES" > $TMP_FILE && cp $TMP_FILE "$FILE"
}

strip_submodule_changes() {
  # looking to remove listing(s) that look like:
  #
  #     * path abbreviated-SHA1...abbreviated-SHA1 (count):
  #       > oneline commit message
  #
  # or:
  #
  #     * path abbreviated-SHA1...abbreviated-SHA1:
  #
  cat "$FILE" | ruby -e '
    class ParseError < RuntimeError; end

    begin
      while STDIN.readline
        if $_ =~ /^\* .+ [a-f0-9]+\.\.\.[a-f0-9]+( \(\d+\))?:$/

          # check for at least one trailing commit (if applicable)
          raise ParseError if $~[1] && STDIN.readline !~ /^  [<>] .+$/

          while STDIN.readline
            if $_ =~ /^  [<>] .+$/  # a commit
              next
            elsif $_ =~ /\A\s*\z/   # an empty (separator) line
              break
            else                    # unexpected input
              raise ParseError
            end
          end
        else
          puts $_
        end
      end
    rescue EOFError
      # normal exit
    rescue ParseError
      exit 1 # effectively aborts overwriting of file
    end
  ' > $TMP_FILE && cp $TMP_FILE "$FILE"
}

case "$SOURCE" in
  merge)
    # no recording done for merge commits (we assume that the parent commits
    # in the merge will have had their submodule changes recorded in them)
    ;;
  *)
    strip_submodule_changes
    insert_submodule_changes
    ;;
esac
